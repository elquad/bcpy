#!/usr/bin/python
# Only display signal.
# Eats signal file.

import os
import sys
import getopt
sys.path.append(os.path.abspath('/home/xskola/work/bcpy/'))
import bcpy

usage = """
bcpy-spectra: display signal(s)' spectra (using FFT)

    -c      Select channels to display. Use commas or multiple -c options for more channels.
    -r      Limit the output to selected Hz range. Default: 1-45 Hz; use with empty arg "" to disable.
    -f      Filter channels in selected range. Usage: -f 1-45
    -s      Smooth the curve to steps of selected width. Default: 1 Hz
    -a      Average data from all (selected) channels, for each input file separately.

    The rest of the arguments shall be signal files you wish to display."""

channelset = list()
hzrange = "1-45"
filterrange = ""
width = 1
order = 1
average = False

try:
    opts, args = getopt.getopt(sys.argv[1:], "c:f:r:hs:a")
except getopt.GetoptError:
    print usage
    sys.exit(2)
for opt, arg in opts:
    if opt in ("-h"):
        print usage
        sys.exit()
    elif opt in ("-f"):
        filterrange = arg
    elif opt in ("-c"):
        channelset += arg.split(',')
    elif opt in ("-r"):
        hzrange = arg
    elif opt in ("-s"):
        width = float(arg)
    elif opt in ("-a"):
        average = True

if args == []:
    print """You need to specify at least one signal file.
    """ + usage
    sys.exit(1)


for signal in args:
    try:
        eeg = bcpy.BCPy(signal)
    except (UnboundLocalError, NameError):
        print """Error
        """ + usage
        sys.exit(2)

    if not channelset == []:
        eeg.select_channels(channelset)

    if average is True:
        eeg.squeeze_channels()

    if not filterrange == "":
        hzs = filterrange.split('-')
        eeg.filter_channels(float(hzs[0]), float(hzs[1]))

    if order > 1:
        eeg.label_channels("(" + str(order) + ")")
    #eeg.compute_ffts()
    eeg.epoched_ffts(width=4)

    if not hzrange == "":
        hzs = hzrange.split('-')
        eeg.crop_fft_spectrum(float(hzs[0]), float(hzs[1]))
    
    eeg.smooth_fft(width)
    eeg.plot_ffts()

    order += 1

eeg.plot_show()
